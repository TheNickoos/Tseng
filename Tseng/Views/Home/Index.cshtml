@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="fr">
<head>
    
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Tseng</title>
    <link rel="stylesheet" href="styles.css">

</head>
<body>
    <div id="app">
        <div class="ff7">
            <div class="layer border"></div>
            <div class="text">
                <app-character v-for="char in party" v-bind:key="char.character" v-bind:data="char" v-bind:slide="window.charSlide"></app-character>
            </div>
        </div>
        <div class="ff7" style="top: 5px;">
            <div class="layer border"></div>
            <div class="text">
                <div class="base">
                    <span class="location">{{window.location}}</span>
                    <span class="gil">{{window.gil}} Gil</span>
                    <span class="time">{{window.time}}</span>
                </div>
            </div>
        </div>
    </div>

    <script src="~/vue.js"></script>
    <script src="~/axios.js"></script>
    <script>
        const baseWeapon = {
            name: 'Buster Sword',
            type: 'sword',
            growth: 1,
            slots: [
                {
                    type: 'linked',
                    materia: 'magic'
                },
                {
                    type: 'linked',
                    materia: 'none'
                }
            ]
        };
        const baseArmor = {
            name: 'Silver Armlet',
            growth: 1,
            slots: [
                {
                    type: 'linked',
                    materia: 'magic'
                },
                {
                    type: 'linked',
                    materia: 'support'
                },
                {
                    type: 'single',
                    materia: 'summon'
                },
                {
                    type: 'single',
                    materia: 'command'
                },
            ]
        };
        const baseStats = {
            level: 15,
            currentHp: 500,
            maxHp: 750,
            currentMp: 70,
            maxMp: 75,
            status: []
        };
        const baseCharacter = {
            name: 'Cloud',
            character: 'young-cloud',
            weapon: baseWeapon,
            armor: baseArmor,
            accessory: 'Tough Ring',
            stats: baseStats,
            row: 'back',
            statusIndex: 0
        };

        Vue.component('app-materia', {
            props: ['type'],
            template: `
            <img v-if="type !== 'none'" v-bind:src="'images/materia-' + type + '.png'">
            `
        })
        Vue.component('app-character',
            {
                props: ['data', 'slide'],
                template: `<div class="character">
    <div v-if="!!data">
        <div v-bind:class="data.row + 'row portrait'">
            <img v-bind:src="'images/character-' + data.character + '.png'" />
        </div>
        <div class="stats">
            <span v-bind:class="'name ' + (data.stats.currentHp == 0? 'dead ' : '') + (data.stats.currentHp == 7777? 'rainbow ' : '')">{{data.name}}</span>
            <span class="aqua">LV </span><span class="level">{{data.stats.level}}</span> <span class="status"></span>
            <span class="status" v-if="data.stats.status.length > 0"> {{data.stats.status[data.statusIndex]}}</span><br />
            <span class="aqua">HP </span><span v-bind:class="'current-hp ' + (data.stats.currentHp > 0 && data.stats.currentHp < data.stats.maxHp / 4? 'hp-low' : '')">{{data.stats.currentHp}}</span> / <span class="max-hp">{{data.stats.maxHp}}</span><br />
            <span class="aqua">MP </span><span class="current-mp">{{data.stats.currentMp}}</span> / <span class="max-mp">{{data.stats.maxMp}}</span><br />
            <div class="slide active-slide" v-if="slide === 'materia'">
                <ul v-bind:class="'wpn slots ' + (data.weapon.growth === 0? 'no-growth' : '')">
                    <li v-for="slot in data.weapon.slots" v-bind:class="slot.type"><app-materia v-bind:type="slot.materia"></app-materia></li>
                </ul>
                <ul v-bind:class="'arm slots ' + (data.armor.growth === 0? 'no-growth' : '')">
                    <li v-for="slot in data.armor.slots" v-bind:class="slot.type"><app-materia v-bind:type="slot.materia"></app-materia></li>
                </ul>
            </div>
            <div class="slide acive-slide" v-if="slide === 'equip'">
                <span class="aqua fixed">Wpn. </span>
                <span class="weapon">
                    <img v-bind:src="'images/weapon-' + data.weapon.type + '.png'">
                    {{data.weapon.name}}
                </span><br />
                <span class="aqua fixed">Arm. </span>
                <span class="armlet">
                        <img src="images/armlet.png">
                    {{data.armor.name}}
                </span><br />
                <span class="aqua fixed">Acc. </span>
                <span class="accessory"><img src="images/accessory.png" v-if="!!data.accessory"> {{data.accessory}}</span>
            </div>
        </div>
    </div>
</div>
`
            });


        const slides = ['equip', 'materia'];
        let slideIndex = 0;


        function encodeToUnicodeUtf8(str) {
                if (!str.length) return [];

                const url = encodeURI(str);
                const safeString = url.replace(/%20/g, ' '); // On remet l'espace comme un espace
                const utf8Arr = [];
                let multiByte = false;
                let multiByteChar = '';

                Array.from(safeString).forEach((str) => {
                    // S'il y a un % c'est qu'on part sur du multibyte encodé par encodeURI
                    if (str === '%') multiByte = true;

                    // Premier caractère de l'octet
                    else if (multiByte && !multiByteChar) multiByteChar = str;

                    // Second caractère de l'octet encodé
                    else if (multiByte) {
                        utf8Arr.push(multiByteChar + str);
                        multiByteChar = '';
                        multiByte = false;
                    }

                    // Le caractère n'a pas été encodé, on récupère son codepoint
                    else utf8Arr.push(str.charCodeAt().toString(16));
                });

                return utf8Arr;
        }

        let app = new Vue({
            el: '#app',
            data: {
                party: [
                    {...baseCharacter, name: 'Barret', character: 'barret'},
                    {...baseCharacter, name: 'Vincent', character: 'vincent'},
                    baseCharacter,
                ],
                window: {
                    time: '10:54:23',
                    gil: 1700,
                    location: 'Fort Condor',
                    charSlide: 'equip'
                },
                colors: {
                    topLeft: '#007300',
                    topRight: '#004B00',
                    bottomLeft: '#004F00',
                    bottomRight: '#001600'
                }
            }
        });

        var rotateSlide = function() {
            if(++slideIndex >= slides.length) {
                slideIndex = 0;
            }
            app.window.charSlide = slides[slideIndex];
            setTimeout(rotateSlide, 3000);
        }
        var updateCheck = function () {
            axios
                .get('/Home/Data')
                .then(d => {
                    app.window.time = d.data.timeActive;
                    app.window.gil = d.data.gil;
                    app.window.location = d.data.location;
                    const chars = [];

                    for (let c = 0; c < d.data.party.length; ++c) {
                        const character = d.data.party[c];
                        if (!!character) {
                            const char = {
                                name: character.name,
                                character: character.face,
                                weapon: {
                                    name: character.weapon.name,
                                    type: character.weapon.weaponType.toLowerCase(),
                                    growth: character.weapon.growth,
                                    slots: []
                                },
                                armor: {
                                    name: character.armlet.name,
                                    growth: character.armlet.growth,
                                    slots: []
                                },
                                accessory: !! character.accessory? character.accessory.name : '',
                                stats: {
                                    currentHp: character.currentHp,
                                    maxHp: character.maxHp,
                                    currentMp: character.currentMp,
                                    maxMp: character.maxMp,
                                    level: character.level,
                                    status: character.statusEffects,
                                },
                                row: character.backRow ? 'back' : 'front',
                                statusIndex: app.party[c].statusIndex < character.statusEffects.length? app.party[c].statusIndex : 0

                            };

                            for (let slot = 0;
                                slot < character.weapon.linkedSlots + character.weapon.singleSlots;
                                ++slot) {
                                char.weapon.slots.push({
                                    type: slot < character.weapon.linkedSlots ? 'linked' : 'single',
                                    materia: character.weaponMateria[slot].typeName.toLowerCase()
                                });
                            }
                            for (let slot = 0;
                                slot < character.armlet.linkedSlots + character.armlet.singleSlots;
                                ++slot) {
                                char.armor.slots.push({
                                    type: slot < character.armlet.linkedSlots ? 'linked' : 'single',
                                    materia: character.armletMateria[slot].typeName.toLowerCase()
                                });
                            }
                            chars.push(char);
                        } else {
                            chars.push(false);
                        }

                    }

                    app.party = chars;

                    document.querySelectorAll(".ff7 .layer").forEach(e => e.style.background =
                        `linear-gradient(to top left, rgba(0,0,176, 0) 50%, #${d.data.colorTopLeft}), radial-gradient(farthest-side at top right, #${d.data.colorTopRight
                        }, rgba(0, 0, 80, 0)), radial-gradient(farthest-side at bottom left, #${d.data.colorBottomLeft
                        }, rgba(0, 0, 128, 0)), linear-gradient(to bottom right, rgba(0, 0, 32, 0) 50%, #${d.data.colorBottomRight})`);
                });

            setTimeout(updateCheck, 300);
        }
        cycleStatus = function() {
            for (let i = 0; i < 3; ++i) {
                let index = app.party[i].statusIndex +1;
                if (index >= app.party[i].stats.status.length) {
                    index = 0;
                }
                app.party[i].statusIndex = index;
            }
            setTimeout(cycleStatus, 1000);
        }

        cycleStatus();
        updateCheck();
        rotateSlide();
    </script>
</body>
</html>